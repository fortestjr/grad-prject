import requests
import urllib.parse
import sys
import argparse
import json
from requests.exceptions import RequestException, HTTPError, ConnectionError, Timeout

def is_valid_url(url):
    """Validate if the input is a proper URL."""
    try:
        result = urllib.parse.urlparse(url)
        return all([result.scheme, result.netloc]) and result.scheme in ['http', 'https']
    except ValueError:
        return False

def make_request(url, timeout=5):
    """Attempt to make an HTTP request to the provided URL with error handling and return structured result."""
    result = {
        "url": url,
        "status": "failed",
        "status_code": None,
        "response_headers": {},
        "response_excerpt": "",
        "ssrf_indicators": [],
        "error": None
    }

    try:
        headers = {'User-Agent': 'SSRF-Test-Tool/1.0'}
        response = requests.get(url, headers=headers, timeout=timeout, allow_redirects=False)
        response.raise_for_status()

        result["status"] = "success"
        result["status_code"] = response.status_code
        result["response_headers"] = dict(response.headers)
        result["response_excerpt"] = response.text[:500]

        # Detect SSRF indicators
        if 'localhost' in url.lower() or '127.0.0.1' in url or '::1' in url:
            result["ssrf_indicators"].append("Request to localhost or loopback IP detected")
        if response.headers.get('Server'):
            result["ssrf_indicators"].append(f"Server header leaked: {response.headers.get('Server')}")

        return result

    except ConnectionError:
        result["error"] = "ConnectionError: Failed to connect to the server. Host may be unreachable."
    except Timeout:
        result["error"] = "Timeout: The request timed out."
    except HTTPError as e:
        result["status_code"] = e.response.status_code
        result["error"] = f"HTTPError: {e.response.status_code} - {e.response.reason}"
        if e.response.status_code == 403:
            result["ssrf_indicators"].append("Access forbidden (403) â€” might indicate internal/protected resource")
    except RequestException as e:
        result["error"] = f"RequestException: {str(e)}"
    except Exception as e:
        result["error"] = f"Unexpected error: {str(e)}"

    return result

def main():
    """Main function to run the SSRF testing tool with JSON output."""
    parser = argparse.ArgumentParser(
        description="SSRF Vulnerability Testing Tool - Outputs structured JSON results.",
        epilog="Use responsibly and only on systems you have permission to test."
    )
    parser.add_argument("url", type=str, help="The URL to test (e.g., http://example.com)")
    args = parser.parse_args()

    url = args.url.strip()

    if not url:
        print(json.dumps({"error": "No URL provided."}))
        return
    if not is_valid_url(url):
        print(json.dumps({"error": "Invalid URL. Must include http/https and a valid domain."}))
        return

    result = make_request(url)
    print(json.dumps(result, indent=4))

if __name__ == "__main__":
    main()

